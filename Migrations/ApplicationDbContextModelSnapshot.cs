// <auto-generated />
using System;
using CarWash;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarWash.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CarWash.Entities.CarWashEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CarWashOpen")
                        .HasColumnType("bit");

                    b.Property<int>("ClosingHours")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpeningHours")
                        .HasColumnType("int");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CarWashes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Tamo Daleko 21",
                            CarWashOpen = false,
                            ClosingHours = 17,
                            Name = "Bili CarWash",
                            OpeningHours = 9,
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof_TXU9g0v-DUxTBZwmrybRDWu_4itnIkAEC-mxbhtZN8v0F0AbQTqNutoRf-jwUOrtyPZtSosRucKKOQC_s4GRMTvwAB2rh80Pr2rMQLiLHmQ",
                            Picture = ""
                        },
                        new
                        {
                            Id = 2,
                            Address = "Fiu 69",
                            CarWashOpen = false,
                            ClosingHours = 16,
                            Name = "Miki Doo Pranje",
                            OpeningHours = 8,
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof8IO9driRYWCcIxveTLtEhhYA7cHM93UF-6L7bhr2ChysFNmcEqZYLEYD29E8qB-tofkPEJ3FLCJpYXgQRVfOU1_qSyftSt5S4JxQAtCZBBGg",
                            Picture = ""
                        },
                        new
                        {
                            Id = 3,
                            Address = "Bulevar Puteva 37",
                            CarWashOpen = false,
                            ClosingHours = 18,
                            Name = "Mosa Komerc Wash",
                            OpeningHours = 10,
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof9jamU5gIBgAAOK_fi5nRl5iN8MBfJTg2c0r2CSPbDK0ShQ4MWrdNA_FcCLJkgdadNuV9NQvS8qYEZ110FawzKkMY3v5VJGxbNuW9QJjWQ7nw",
                            Picture = ""
                        },
                        new
                        {
                            Id = 4,
                            Address = "Over the rock 123",
                            CarWashOpen = false,
                            ClosingHours = 17,
                            Name = "Carwash Infinity",
                            OpeningHours = 9,
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof_1QNySaHmBASCjgnQ6QcX1haw5bhDDJY4A8b7qEP6whMUh-AiCkNFjOWrYI4YoqYCzJ1dyI5mOmZjiF2h5J4wFKCf7dpzEmXVVjNe8AML6cQ",
                            Picture = ""
                        },
                        new
                        {
                            Id = 5,
                            Address = "Bulevar Puteva 37",
                            CarWashOpen = false,
                            ClosingHours = 20,
                            Name = "Poor's Man Carwash",
                            OpeningHours = 8,
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof_RCaHYYu9hasbDwmjHjVzPhR3URMhYx57skacDiL4u-OsYaTCka1QHgtskVU8z2WMjA7ktTvahTueMjWhHmH1D-X3ebwaeGwtza23aLGWGYQ",
                            Picture = ""
                        },
                        new
                        {
                            Id = 6,
                            Address = "Bulevar 37",
                            CarWashOpen = false,
                            ClosingHours = 20,
                            Name = "Something",
                            OpeningHours = 8,
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof_UF5lNvvhqKzGw0Yqty_hR-TKClYYCpRfWeBndcAPO80pZ4aEQ_DVaEGCGkZeyKXJ6ivaRPdb95uI-mJFhp3M8HMI_mNKRGL-jryP8P1OVLw",
                            Picture = ""
                        },
                        new
                        {
                            Id = 7,
                            Address = "Puteva 37",
                            CarWashOpen = false,
                            ClosingHours = 18,
                            Name = "Carwasha",
                            OpeningHours = 10,
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof-AdJS5pLmhVnEAHOn3Z5jgYmB3jQdQW2ajs0oXqGx3vMqMWmrR45kZ86JuG1Tt_SdJB6Ip0mj1ERQM_reS8PMqSC3nlANloSMROxYCwK0Wdg",
                            Picture = ""
                        },
                        new
                        {
                            Id = 8,
                            Address = "Bulevar Necega 37",
                            CarWashOpen = false,
                            ClosingHours = 17,
                            Name = "Carwashb",
                            OpeningHours = 9,
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof_dVks3qu-h41aU55xHF3EQgr8QDg0OoBm9InOkjXKLK_xOlnWdPY6qyoZHELHEnGkkCw4VcJ3cqKfraGDW3RKHlsqyZukK_ZEz78OpXxYQjQ",
                            Picture = ""
                        },
                        new
                        {
                            Id = 9,
                            Address = "Nesto Tamo 3",
                            CarWashOpen = false,
                            ClosingHours = 17,
                            Name = "Carwashc",
                            OpeningHours = 8,
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof-H1VQ50f4JCqgq2dEdN3_XJf7VrbY3FTcFxUusLOg9rBIyShw39kN0x5DmaJODB9wnMdA1BHQQvu2zpMVQQMWjn-2i7834XDr9C-BVdCtHag",
                            Picture = ""
                        },
                        new
                        {
                            Id = 10,
                            Address = "Blafa 21",
                            CarWashOpen = false,
                            ClosingHours = 20,
                            Name = "Carwashq",
                            OpeningHours = 8,
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof9-4U7_KneKAH-s-BFJ3G6j08lIs_mm4lSCm3cwfJvNLq8mEP3W8MmEeubbKQoN0zYEh_zo-OxCaV8scdxXFZhxes7OKzP7a9Gsk4U2TdDTPA",
                            Picture = ""
                        },
                        new
                        {
                            Id = 11,
                            Address = "Iha Adresa 9",
                            CarWashOpen = false,
                            ClosingHours = 18,
                            Name = "Carwashw",
                            OpeningHours = 6,
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof8Nu_eaaw5xNg_ChXBl3K57NDY_KjscLYRz9VSG18wtlkaF_ORSCyy5zJ5kdL4jdKDcFbDW88MHV3Yg0tEw6SYImLMXPiUNxFX5d-797vC8Cw",
                            Picture = ""
                        },
                        new
                        {
                            Id = 12,
                            Address = "Polet Trg 3",
                            CarWashOpen = false,
                            ClosingHours = 20,
                            Name = "Carwashy",
                            OpeningHours = 9,
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof-_2Wd19GC5d2sekF_GfXU6gB-bm1UQziRSNPyhuesO2clS-8cVnVNG2XXUL2CYdhb1CVX7L0kJ9Lr50q1MuQChWRHYbmLrQkeWiZSx0HGixg",
                            Picture = ""
                        },
                        new
                        {
                            Id = 13,
                            Address = "Ada 2",
                            CarWashOpen = false,
                            ClosingHours = 20,
                            Name = "Carwashu",
                            OpeningHours = 10,
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof8TeSsmMhO0tCVbB3Yx2iOTfunKur_6rDiD4guj6oU8vIS18gX2sQ-tR3bPycKYb2_h5KnDO7OqhhxE1rsiZpJftFKmmUIc7lmC-3z3wbUNmA",
                            Picture = ""
                        });
                });

            modelBuilder.Entity("CarWash.Entities.CarWashEntityServices", b =>
                {
                    b.Property<int>("CarWashEntityId")
                        .HasColumnType("int");

                    b.Property<int>("CarWashServiceId")
                        .HasColumnType("int");

                    b.HasKey("CarWashEntityId", "CarWashServiceId");

                    b.HasIndex("CarWashServiceId");

                    b.ToTable("CarWashEntityServices");

                    b.HasData(
                        new
                        {
                            CarWashEntityId = 1,
                            CarWashServiceId = 1
                        },
                        new
                        {
                            CarWashEntityId = 1,
                            CarWashServiceId = 2
                        },
                        new
                        {
                            CarWashEntityId = 1,
                            CarWashServiceId = 3
                        },
                        new
                        {
                            CarWashEntityId = 2,
                            CarWashServiceId = 1
                        },
                        new
                        {
                            CarWashEntityId = 2,
                            CarWashServiceId = 2
                        },
                        new
                        {
                            CarWashEntityId = 3,
                            CarWashServiceId = 5
                        },
                        new
                        {
                            CarWashEntityId = 4,
                            CarWashServiceId = 2
                        },
                        new
                        {
                            CarWashEntityId = 4,
                            CarWashServiceId = 3
                        },
                        new
                        {
                            CarWashEntityId = 5,
                            CarWashServiceId = 4
                        },
                        new
                        {
                            CarWashEntityId = 6,
                            CarWashServiceId = 1
                        },
                        new
                        {
                            CarWashEntityId = 6,
                            CarWashServiceId = 3
                        },
                        new
                        {
                            CarWashEntityId = 7,
                            CarWashServiceId = 5
                        },
                        new
                        {
                            CarWashEntityId = 8,
                            CarWashServiceId = 6
                        },
                        new
                        {
                            CarWashEntityId = 9,
                            CarWashServiceId = 7
                        },
                        new
                        {
                            CarWashEntityId = 10,
                            CarWashServiceId = 8
                        },
                        new
                        {
                            CarWashEntityId = 11,
                            CarWashServiceId = 9
                        },
                        new
                        {
                            CarWashEntityId = 12,
                            CarWashServiceId = 1
                        },
                        new
                        {
                            CarWashEntityId = 12,
                            CarWashServiceId = 2
                        },
                        new
                        {
                            CarWashEntityId = 13,
                            CarWashServiceId = 1
                        },
                        new
                        {
                            CarWashEntityId = 13,
                            CarWashServiceId = 2
                        },
                        new
                        {
                            CarWashEntityId = 13,
                            CarWashServiceId = 3
                        });
                });

            modelBuilder.Entity("CarWash.Entities.CarWashService", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Owner")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Regular",
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof8W4t4Qreao6Gm5m9OZ4zGLqVPyLlodIkUCPsNVB1IHeMLsobDkhmGOxWT8SzJbqc_m2zye285Xd7_d3ILw3HwH8wN9OBOLXwXL2Dnl1Bc25g",
                            Price = 500.0m
                        },
                        new
                        {
                            Id = 2,
                            Name = "Extended",
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof8w4ynmJabSMgMZkn-aKgg97pkifbObXzHRmdaVkl6zyLD20ZgpEj2D6nsHBxTcapM0Ltgic5gRc6IFhwlTHZpczax__dshJezFeXKocK_LFA",
                            Price = 1000.0m
                        },
                        new
                        {
                            Id = 3,
                            Name = "Premium",
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof95-JB-wWPIiSSbtZ9irXOzN-M_k5Ik5R3p8e8rYfx6fVHPwg4mhGBAMiLUFWnM90cBDDM4qqrDjv5Q0jw6oNJeAkV-qZBm2hirfaYf8EShMw",
                            Price = 2000.0m
                        },
                        new
                        {
                            Id = 4,
                            Name = "PoorService",
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof9OQuV7dB8EseqC4Gm_oTbYevlgrLjjY2wudg3-evOLXfePSep2JjcYAy10vYml_b1L52oLYL8swxCWVZJ_RXj_sw5FOh-VzAcYrhib1LbkGA",
                            Price = 100.0m
                        },
                        new
                        {
                            Id = 5,
                            Name = "GlobalOne",
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof8qNxmh04BuZT3eBBhkPN8hi3NTZZntqK3RI6aNPAQG-4AIp94J7gz0B_w-mdD6eFu_KZBC4ZraCag4BD-yqvvaYaSLaJbAkxfLIaNBwehvhg",
                            Price = 10000.0m
                        },
                        new
                        {
                            Id = 6,
                            Name = "GlobalTwo",
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof_6TM5n4i-eqFqwWygvfrlpyKpFlujufQQk-PJixdERVG3ZX-H8t1FZ4f55jpm8W40A_8qGWjy02i95wPe1qrEqhm_GGnQJ8CdGeRDIb82g2g",
                            Price = 10000.0m
                        },
                        new
                        {
                            Id = 7,
                            Name = "GlobalThree",
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof-3qzkLhm3BYlTyejt4PAoRz4P14cDEXdyUBGHIEHwRn5F4IMkI-ftw6alA0O0dhKaGZfNRLk3W55YCVae4HTQZ3KMsm22EvBgjVp-Ang4BMw",
                            Price = 10000.0m
                        },
                        new
                        {
                            Id = 8,
                            Name = "GlobalFour",
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof-HlU6NH1lylvYF5jPq1QKD8RgVCejFHFV3aIc-59os-PK3CtCI6zf2g9STctEBsuIcn1Ap6hsz0qx3hHX_noX9nlLr-5LPtEpyHO_deIzq8g",
                            Price = 10000.0m
                        },
                        new
                        {
                            Id = 9,
                            Name = "GlobalFive",
                            Owner = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof-zmQ6oxUSK5_s-3-RmG4BwwpnTRPdf0eVnhoX08NNJHJQsu0tG0ndH_QZ_N5vyv5-bZzxZpsAVguZrWA8iFqil59zlyy_UIzAacmYRGMX0Zw",
                            Price = 10000.0m
                        });
                });

            modelBuilder.Entity("CarWash.Entities.Earnings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Appointment")
                        .HasColumnType("datetime2");

                    b.Property<int>("CarWashId")
                        .HasColumnType("int");

                    b.Property<string>("Owner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SchedulingId")
                        .HasColumnType("int");

                    b.Property<int>("ServiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Earnings");
                });

            modelBuilder.Entity("CarWash.Entities.Scheduling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Appointment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CurrentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserReservation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Schedulings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Appointment = new DateTime(2020, 2, 12, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2020, 2, 8, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 500.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof9juYD4flt1EZIucj-fRIKJ7hUa7bIW-ZRBUNNzf6NnxKW-tIpt08SdzNmtVzogAQoilBu3zuQYRYbEA8JyT0ECbf9PvuXrcgbxHyYcvYfGlQ"
                        },
                        new
                        {
                            Id = 2,
                            Appointment = new DateTime(2021, 5, 20, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2021, 5, 19, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 1000.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof9SnR1-A-YE920OI4oKmATbdfIoSZkxObaugKUuZ-CTXFPRzYRFTQmY_RJ1sVrUuABaJ2n0_v5lbN7kbqs4aK3kquBaoKBBXW_4ora1_iNpYg"
                        },
                        new
                        {
                            Id = 3,
                            Appointment = new DateTime(2022, 5, 14, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2022, 5, 12, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 2000.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof_GQXojHmCLtDHMIEizNp8xB_d_5Zp-I5kgH3hji8Ri3xaKM63DXDbwVRTN0p09cjQppTm-hNw-xlgE48uf2KPp-SE4FzrHi3hyG1dsXLJAOg"
                        },
                        new
                        {
                            Id = 4,
                            Appointment = new DateTime(2022, 5, 24, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2020, 5, 8, 9, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 500.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof_1XOO_-6ddo_034SLsig-_KWi8xiaOqKhasAEKkqHOI-CqVir1YbXvk6GCIo2IdNhilmFKU2MBh3XpzMymK1jKDPjBhxZZ_TXrcnOD-ieTOQ"
                        },
                        new
                        {
                            Id = 5,
                            Appointment = new DateTime(2022, 6, 15, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2020, 6, 10, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 500.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof9p0PK20uKnRCrZXvb67US-6MylBtvgazel7av1uF1KS4jbKOb_3-jBjW1S2dQTtO0igk5-D14OMYCq3Psmhm_C7bWd_NhjjVTw_RE6pk8r_Q"
                        },
                        new
                        {
                            Id = 6,
                            Appointment = new DateTime(2023, 6, 18, 14, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2022, 6, 8, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 10000.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof_ZwaNQclj1g_IaQWCwWSfI872avP4was2LdPxMDAiQncsSQI4hP8F8itxpxVxYL1dsdpkw_WU47Abno1fzrCIvLsD0Bf_n7ambTwqLB4lC1g"
                        },
                        new
                        {
                            Id = 7,
                            Appointment = new DateTime(2023, 7, 12, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2022, 7, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 1000.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof_E74cN8nLCQxT08n_3hTcbUtBy38yrlOWrVkSi2x-U-ehleqpzV-nDYdRNBmmLz4whPW6FXB73CPO78oZdo95wLudTTOnIC7h7S4lZiLwv3A"
                        },
                        new
                        {
                            Id = 8,
                            Appointment = new DateTime(2022, 7, 19, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2022, 7, 18, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 100.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof9LxUhUxeDeCp6TKwFeDM9y7_EJEjYD8EWYMwwmsDqykUCTutlertoTW03eBeinyK6T-1aoE41ibHCxRsQesR-RmepJnTtVwAUvLDzZUKSs5w"
                        },
                        new
                        {
                            Id = 9,
                            Appointment = new DateTime(2022, 9, 20, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2022, 9, 18, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 500.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof-gMtCN8YaxKNgPVMaYjJOhMtLkJ9qdYnGPQngIJrMnqiLMVmVpLEr11cb59KFJNeKIxjQaONGJxnqyqOdEZNcg5aP9omt2FVb4r02I21EJwQ"
                        },
                        new
                        {
                            Id = 10,
                            Appointment = new DateTime(2022, 9, 22, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2022, 9, 12, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 1000.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof9Y0IeTohgUSYMeaM1HcN2Jtba3Tq5haE92npQRj6llUN2WuzeOuByJsXSNP-7hXTBjQxGQO27YK8KhpuWkRYhNZ2jD36KAA8HmNueOf9p8Kg"
                        },
                        new
                        {
                            Id = 11,
                            Appointment = new DateTime(2022, 9, 23, 15, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2022, 9, 21, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 500.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof8_d3nI54mMyfyIF-Cg-sAxudLPQBdolD1j0VrAQ1FljVh1KO74Zw31a5Jm8O2dTPKRY0fxRO3_BFRjuO8bDcGnNfy-81HZlXzRaRBEkwmr4A"
                        },
                        new
                        {
                            Id = 12,
                            Appointment = new DateTime(2022, 9, 5, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2022, 9, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 10000.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof9zQL1tidWRt6-bQWKMOhIIbnVV8s9_6jFGHkBfXsQVAcQeNo5ZutnT01lByfrqOF0ckzruQSOqlwjRf8KFDqpRV0MO29IX7p-yz1fsvmH7iQ"
                        },
                        new
                        {
                            Id = 13,
                            Appointment = new DateTime(2022, 9, 6, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2022, 9, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 1000.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof-zCPWc72VmOUwqd6ZEfRQNUNPmHjQV-10FtotBtVv2LeKu2bovTkfkilo_82KHxZo_V2r1YFvdEqwMKRWLm4bOPEbztew0A8ACAl37YDhlxw"
                        },
                        new
                        {
                            Id = 14,
                            Appointment = new DateTime(2022, 10, 4, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2020, 10, 1, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 100.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof_7NHluLcSKlpq6x3JYF5o2VnbkqSnkHQc0uby1kUu61PKD3DbJM-VW-toeO47QSXpImUTLHYfT4l8H5BLvsDbaGNjKR1ajO-ay2qNfAKtqmA"
                        },
                        new
                        {
                            Id = 15,
                            Appointment = new DateTime(2023, 10, 4, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2022, 10, 1, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 100.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof-cx3ccClm41RjRNWMB4utdrN_k1WuvEZWVGlhefKSTLwNl580zGXmCeKZ-bpJ5eLYV-I4ZYYMwkwHIiR-PqDwn8ChSx4QQEwcEGvVGZWnWKw"
                        },
                        new
                        {
                            Id = 16,
                            Appointment = new DateTime(2023, 10, 6, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2022, 10, 1, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 100.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof8Wu1rH91TBuInFfmhtceUHvVyCqu8mRgVOg4u2F15poaA9JzNcEI4Vqo5us0g5BupM5IarUq-zrRayc_nexqPNHevUFt2AJPRztzB9Gp_8Hg"
                        },
                        new
                        {
                            Id = 17,
                            Appointment = new DateTime(2023, 10, 7, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2022, 10, 1, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 100.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof8nDAYa0thiid6RvDUMRnJJmMwd5YOEWVnpfycdJ-VK5XFKzrDuhifE7rfKHmV17rk3S8_jRmiGwgjxFrK0Y5WCeMtMhenRFcBu0CR7VUk_tg"
                        },
                        new
                        {
                            Id = 18,
                            Appointment = new DateTime(2023, 10, 9, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2022, 10, 2, 12, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 100.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof_yPFFDWubUuCui7Jl3FGgSGLp0mOOABGo2QWschNwkdYEfwXOtGeWap2N_HB9ZJBRzXuxKIO2LoQMQTxvS4n8qcpu0Swm6NOiftDig_MhwYw"
                        },
                        new
                        {
                            Id = 19,
                            Appointment = new DateTime(2023, 10, 10, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2022, 10, 2, 11, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 100.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof8XfP0ZxIG6I6kyz5XDlsxmAYqtJse2fFteViIVaQ44mERIorAlALhj8kN3KMuxbpBhxAyR2MUGYT9cK1MD2LsNM_unDhLuOHyjai50Ry_urQ"
                        },
                        new
                        {
                            Id = 20,
                            Appointment = new DateTime(2023, 10, 11, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            CurrentDate = new DateTime(2022, 10, 2, 13, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 100.00m,
                            Status = "accepted",
                            UserReservation = "CfDJ8NuQ7pwwqeNAg-k_ZKtnof_PMzqetMjtZUXkdDqDmaCXdHi1Q3KXGc8Uf5kZidX0fsXZ8IpvdAonXFEa33dzP7lQZLqkDD_1yw814s7qYa5J-xkifZGmsxDfrj-jqkMiLg"
                        });
                });

            modelBuilder.Entity("CarWash.Entities.SchedulingEntity", b =>
                {
                    b.Property<int>("SchedulingId")
                        .HasColumnType("int");

                    b.Property<int>("CarWashEntityId")
                        .HasColumnType("int");

                    b.HasKey("SchedulingId", "CarWashEntityId");

                    b.HasIndex("CarWashEntityId");

                    b.ToTable("SchedulingEntity");

                    b.HasData(
                        new
                        {
                            SchedulingId = 1,
                            CarWashEntityId = 1
                        },
                        new
                        {
                            SchedulingId = 2,
                            CarWashEntityId = 1
                        },
                        new
                        {
                            SchedulingId = 3,
                            CarWashEntityId = 1
                        },
                        new
                        {
                            SchedulingId = 4,
                            CarWashEntityId = 1
                        },
                        new
                        {
                            SchedulingId = 5,
                            CarWashEntityId = 2
                        },
                        new
                        {
                            SchedulingId = 6,
                            CarWashEntityId = 3
                        },
                        new
                        {
                            SchedulingId = 7,
                            CarWashEntityId = 4
                        },
                        new
                        {
                            SchedulingId = 8,
                            CarWashEntityId = 5
                        },
                        new
                        {
                            SchedulingId = 9,
                            CarWashEntityId = 1
                        },
                        new
                        {
                            SchedulingId = 10,
                            CarWashEntityId = 2
                        },
                        new
                        {
                            SchedulingId = 11,
                            CarWashEntityId = 2
                        },
                        new
                        {
                            SchedulingId = 12,
                            CarWashEntityId = 3
                        },
                        new
                        {
                            SchedulingId = 13,
                            CarWashEntityId = 4
                        },
                        new
                        {
                            SchedulingId = 14,
                            CarWashEntityId = 5
                        },
                        new
                        {
                            SchedulingId = 15,
                            CarWashEntityId = 5
                        },
                        new
                        {
                            SchedulingId = 16,
                            CarWashEntityId = 5
                        },
                        new
                        {
                            SchedulingId = 17,
                            CarWashEntityId = 1
                        },
                        new
                        {
                            SchedulingId = 18,
                            CarWashEntityId = 1
                        },
                        new
                        {
                            SchedulingId = 19,
                            CarWashEntityId = 1
                        },
                        new
                        {
                            SchedulingId = 20,
                            CarWashEntityId = 1
                        });
                });

            modelBuilder.Entity("CarWash.Entities.SchedulingServices", b =>
                {
                    b.Property<int>("SchedulingId")
                        .HasColumnType("int");

                    b.Property<int>("CarWashServiceId")
                        .HasColumnType("int");

                    b.HasKey("SchedulingId", "CarWashServiceId");

                    b.HasIndex("CarWashServiceId");

                    b.ToTable("SchedulingServices");

                    b.HasData(
                        new
                        {
                            SchedulingId = 1,
                            CarWashServiceId = 1
                        },
                        new
                        {
                            SchedulingId = 2,
                            CarWashServiceId = 2
                        },
                        new
                        {
                            SchedulingId = 3,
                            CarWashServiceId = 3
                        },
                        new
                        {
                            SchedulingId = 4,
                            CarWashServiceId = 1
                        },
                        new
                        {
                            SchedulingId = 5,
                            CarWashServiceId = 1
                        },
                        new
                        {
                            SchedulingId = 6,
                            CarWashServiceId = 5
                        },
                        new
                        {
                            SchedulingId = 7,
                            CarWashServiceId = 2
                        },
                        new
                        {
                            SchedulingId = 8,
                            CarWashServiceId = 4
                        },
                        new
                        {
                            SchedulingId = 9,
                            CarWashServiceId = 1
                        },
                        new
                        {
                            SchedulingId = 10,
                            CarWashServiceId = 2
                        },
                        new
                        {
                            SchedulingId = 11,
                            CarWashServiceId = 1
                        },
                        new
                        {
                            SchedulingId = 12,
                            CarWashServiceId = 5
                        },
                        new
                        {
                            SchedulingId = 13,
                            CarWashServiceId = 2
                        },
                        new
                        {
                            SchedulingId = 14,
                            CarWashServiceId = 4
                        },
                        new
                        {
                            SchedulingId = 15,
                            CarWashServiceId = 4
                        },
                        new
                        {
                            SchedulingId = 16,
                            CarWashServiceId = 4
                        },
                        new
                        {
                            SchedulingId = 17,
                            CarWashServiceId = 2
                        },
                        new
                        {
                            SchedulingId = 18,
                            CarWashServiceId = 3
                        },
                        new
                        {
                            SchedulingId = 19,
                            CarWashServiceId = 2
                        },
                        new
                        {
                            SchedulingId = 20,
                            CarWashServiceId = 1
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "fab4fac1-c546-41de-aebc-a14da6895711",
                            ConcurrencyStamp = "1",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2d27b0d7-6026-4a79-9f0f-1a59de81182e",
                            Email = "admin@bla.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@BLA.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFpTtCM1bzuemRnLnThQw7lE6daIUk60fjAOkbq9DoUJ9cwN+BkLXOQi2Dd0puhjog==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9d6dd0e7-feec-4726-9435-252c6985e698",
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "85fbd79d-bc60-4966-916f-24f73a9af1cb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3e2eda41-42e2-43b1-8c5e-603ecf57a526",
                            Email = "aleksandar@bla.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALEKSANDAR@BLA.COM",
                            NormalizedUserName = "ALEKSANDAR",
                            PasswordHash = "AQAAAAEAACcQAAAAEK8Tvffo09h2XqNi2tlZuXLxjBkhoreKIq76GFfiPEEZVs56/H+GN32SqKpExZXdOA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d3abb2de-3238-4d79-8787-4d6aea9573e2",
                            TwoFactorEnabled = false,
                            UserName = "aleksandar"
                        },
                        new
                        {
                            Id = "05b41bca-e095-4b12-a84d-5282cbc3f3e1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7747fe16-130f-4030-8492-f0174b5a1a62",
                            Email = "john@yup.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN@YUP.COM",
                            NormalizedUserName = "JOHN",
                            PasswordHash = "AQAAAAEAACcQAAAAEFogVlg2qoDoschNq0XXjuen+eeSQzU9OuawqIzPOIrDDJjIdca5FuGxIaHvSLfPgg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2eb98c53-6c5d-4482-b43c-8c4ff9c446d1",
                            TwoFactorEnabled = false,
                            UserName = "john"
                        },
                        new
                        {
                            Id = "420611f6-66cf-4cd6-b9d6-e15e0663d284",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "748272e5-ed52-4e86-80ff-214e356cf517",
                            Email = "wick@yup.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "WICK@YUP.COM",
                            NormalizedUserName = "WICK",
                            PasswordHash = "AQAAAAEAACcQAAAAEIJ2j7f65E+abKWodx09m2TMyZ98bnfE0iBGk5Z2kRsTeyGRUV+wn6cBqdR+pvm0Rw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b23bf81e-abf5-43c6-9cf7-63a2fbb00865",
                            TwoFactorEnabled = false,
                            UserName = "wick"
                        },
                        new
                        {
                            Id = "421ad256-807a-4869-b683-5b0c18d98cc7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "45146ea7-3bee-413e-892b-dad1d9066bbe",
                            Email = "trent@yup.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "TRENT@YUP.COM",
                            NormalizedUserName = "TRENT",
                            PasswordHash = "AQAAAAEAACcQAAAAEE9QPu1l8hRmXsxm1k+BdfN3BYvA/+u0j9LCTOdExMG7vKWETeeUJAE9koydvTvyvQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "776715dd-d334-440f-9d86-b990e4ef3675",
                            TwoFactorEnabled = false,
                            UserName = "trent"
                        },
                        new
                        {
                            Id = "e9d21d9e-1bda-4ce7-be80-f688eadb8c2e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "82bcf6e5-7b6e-44c4-afac-f7f68fe3f2d5",
                            Email = "billy@yup.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "BILLY@YUP.COM",
                            NormalizedUserName = "BILLY",
                            PasswordHash = "AQAAAAEAACcQAAAAEKFL3mhQepWwPfOnM/zEX9HY58zg+DLQ72yXhZ2xs5DaXo2HW9MZGBhoNHcIuAsjvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7f655ae-c76d-4017-b654-0e15c43b94d9",
                            TwoFactorEnabled = false,
                            UserName = "billy"
                        },
                        new
                        {
                            Id = "6755b339-09fa-4990-b0a4-81c89d23ef5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9658efc2-fbe0-426b-9ee3-d9b808b64c13",
                            Email = "cartman@yup.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CARTMAN@YUP.COM",
                            NormalizedUserName = "CARTMAN",
                            PasswordHash = "AQAAAAEAACcQAAAAEP7FwGgC7agKVpNpAI40VhDAEd/96MHpK6nH19wPBle8mgwug5QGEYKEN0ES/X67DA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4d565e66-ad10-4498-b55d-9323bbe5fa52",
                            TwoFactorEnabled = false,
                            UserName = "cartman"
                        },
                        new
                        {
                            Id = "092ccd3b-1952-4bd0-8c42-349e7f45e947",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eb2e9a4b-2066-49a2-b5a3-0d35afcae0d0",
                            Email = "kenny@omg.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "KENNY@OMG.COM",
                            NormalizedUserName = "KENNY",
                            PasswordHash = "AQAAAAEAACcQAAAAEMy5sPZox5upFOxAeFTIhobXU4rcmVOyWa50i45dQ3v/goV/DcYZ3k3gVAfj7/CYsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "de5ab130-d2c4-48ce-9d0d-e5d86a038e52",
                            TwoFactorEnabled = false,
                            UserName = "kenny"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "8e445865-a24d-4543-a6c6-9443d048cdb9",
                            RoleId = "fab4fac1-c546-41de-aebc-a14da6895711"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("CarWash.Entities.CarWashEntityServices", b =>
                {
                    b.HasOne("CarWash.Entities.CarWashEntity", "CarWashEntity")
                        .WithMany("CarWashEntityServices")
                        .HasForeignKey("CarWashEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarWash.Entities.CarWashService", "CarWashService")
                        .WithMany("CarWashEntityServices")
                        .HasForeignKey("CarWashServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarWashEntity");

                    b.Navigation("CarWashService");
                });

            modelBuilder.Entity("CarWash.Entities.SchedulingEntity", b =>
                {
                    b.HasOne("CarWash.Entities.CarWashEntity", "CarWashEntity")
                        .WithMany("SchedulingEntity")
                        .HasForeignKey("CarWashEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarWash.Entities.Scheduling", "Scheduling")
                        .WithMany("SchedulingEntity")
                        .HasForeignKey("SchedulingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarWashEntity");

                    b.Navigation("Scheduling");
                });

            modelBuilder.Entity("CarWash.Entities.SchedulingServices", b =>
                {
                    b.HasOne("CarWash.Entities.CarWashService", "CarWashService")
                        .WithMany()
                        .HasForeignKey("CarWashServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarWash.Entities.Scheduling", "Scheduling")
                        .WithMany("SchedulingServices")
                        .HasForeignKey("SchedulingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CarWashService");

                    b.Navigation("Scheduling");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarWash.Entities.CarWashEntity", b =>
                {
                    b.Navigation("CarWashEntityServices");

                    b.Navigation("SchedulingEntity");
                });

            modelBuilder.Entity("CarWash.Entities.CarWashService", b =>
                {
                    b.Navigation("CarWashEntityServices");
                });

            modelBuilder.Entity("CarWash.Entities.Scheduling", b =>
                {
                    b.Navigation("SchedulingEntity");

                    b.Navigation("SchedulingServices");
                });
#pragma warning restore 612, 618
        }
    }
}
